package fiap.sd.udp.servidor;

import java.net.InetAddress;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import fiap.sd.udp.chat.Sala;
import fiap.sd.udp.chat.Usuario;
import fiap.sd.udp.simplechatudp.receiver.Receiver;

public class Servidor {
	public List<Sala> salas;
	public Set<Usuario> usuarios;
	
	
	public Servidor() {
		salas = new ArrayList<Sala>();
		usuarios = new HashSet<Usuario>();
	}
	
	
	public void registrar(String nomeUsuario) {
		// TODO
	}

	public Sala obterSalaPorNome(String nome) {
		for (Sala s : salas) {
			if (s != null && s.nome.equals(nome)) {
				return s;
			}
		}
		return null;

	}

	public void entrar(String nomeUsuario, String nomeSala) {
		Sala sala = obterSalaPorNome(nomeSala);
		Usuario usuario = obterUsuarioPorNome(nomeUsuario);

		if (sala != null) {
			sala.usuarios.add(usuario);
		} else {
			// throw new Exception("Sala nao encontrada");
		}
	}

	public void sair(String nomeUsuario, String nomeSala) {
		Sala sala = obterSalaPorNome(nomeSala);
		Usuario usuario = obterUsuarioPorNome(nomeUsuario);

		Usuario user = obterUsuarioPorNome(usuario.nome);

		if (sala != null) {
			sala.usuarios.remove(user);
		} else {
			// throw new Exception("Sala nao encontrada");
		}
	}

	private Usuario obterUsuarioPorNome(String nome) {
		for (Usuario user : usuarios) {
			if (user.nome.equalsIgnoreCase(nome)) {
				return user;
			}
		}
		return null;
	}

	public String listarSalas() {
		String retorno = "Salas:\n";
		for (int i = 0; i < salas.size(); i++) {
			retorno += (i + 1) + " - " + salas.get(i).nome + "\n";
		}
		return retorno;
	}

	public String listarUsuarios(String nomeSala) {
		Sala sala = obterSalaPorNome(nomeSala);
		String retorno = "Usuários da sala " + nomeSala + ":\n";
		for (int i = 0; i < sala.usuarios.size(); i++) {
			retorno += (i + 1) + " - " + sala.usuarios.get(i).nome + "\n";
		}
		return retorno;

	}

	// criarSala(usuárioCriador, nomeDaSala, descSala)

	public String criarSala(String nomeCriador, String nomeSala, String descSala) {
		Usuario user = obterUsuarioPorNome(nomeCriador);
		Sala sala = new Sala();
		sala.nome = nomeSala;
		sala.descricao = descSala;
		sala.criador = user;

		entrar(nomeCriador, nomeSala);
		
		this.salas.add(sala);
		
		return "Criado com sucesso";

	}
	
	/*
	 * enviarMensagem(usuárioRemetente, nomeDaSala, msg) – envia a mensagem “msg” para a
sala “nomeDaSala”, garantindo o envio a todos os outros usuários.
◦ enviarMensagemPrivada(usuárioOrigem, usuárioDestino, msg) – Mensagem privada.
	 */
	
	public void enviarMensagem(String remetente, String nomeSala, String msg) {
		
	}
	
	public static void trataMensagem(InetAddress ipOrigem, Integer portaOrigem, String mensagem) {
		
	}

}
